🏗️ 1. Project Context

Project: WESPA Website Redesign

Stack: React + TypeScript + TailwindCSS

Purpose: A dynamic, API-driven, visually rich redesign of wespa.org

All logic, components, and APIs are already working — only refinements and styling improvements are allowed unless explicitly requested.

⚙️ 2. Cursor General Behavior

Always read existing code before suggesting or modifying anything.

Never regenerate entire files unless the user explicitly says “rebuild” or “rewrite fully.”

When editing, preserve all imports, exports, props, hooks, and TypeScript types.

Always keep API endpoints, data fetching logic, and form submission flows intact.

Assume all components are in production — prioritize non-breaking changes.

Ask for confirmation before removing or renaming a component or file.

🎨 3. Design & UI Adjustments

When improving design or layout:

Follow WESPA’s brand system:

Light Blue: #46B0E1

Dark Blue (hover/accent): #3A95BF

Neutral BG: #F5F7FA

Text: #111827, Secondary: #6B7280

Prefer dynamic, professional, and modern layouts — clean spacing, readable text, responsive grids.

Use Tailwind classes where possible — don’t replace with inline styles.

Add animation or transitions only if subtle and aligned with the existing style.

Avoid drastic layout rewrites — enhance, don’t reinvent.

🔁 4. Functional Integrity

Never remove or alter logic for:

API calls (Rankings, Tournaments, Membership)

Modals

Navigation / routing

Form submissions or validations

If you detect a bug, propose a fix in isolation (e.g., fix duplication, improve scroll behavior) rather than refactoring whole modules.

🪟 5. Layout & UX Rules

Header and Footer must appear only once globally.

If duplicated, fix by wrapping them in a global layout component.

Modal content must be:

Vertically centered (fixed, translateY(-50%))

Internally scrollable, not page-scroll

Properly responsive on mobile (full-screen modal if needed)

Each page can have a unique hero layout, but the visual tone and color scheme must remain consistent.

Use royalty-free contextual images where applicable (Unsplash, Pexels), but never break layout or performance.

🧩 6. Code Quality & Consistency

Maintain strict TypeScript typing — no any unless unavoidable.

Respect ESLint and Prettier configuration (don’t disable them).

Keep file naming conventions and folder structure consistent.

Use descriptive prop names and comments when making structural changes.

Always verify that Tailwind classes do not conflict or duplicate existing rules.

🧠 7. Review & Validation

Before saving or committing:

Check for duplicated components (especially Header/Footer).

Run a quick lint and type check.

Validate all modals, forms, and responsive breakpoints still work.

Ensure new layouts use proper semantic HTML (headings, sections, articles).

Double-check that no console warnings or errors are introduced.

✅ 8. Behavior Summary

Cursor should act like a senior frontend engineer, not an AI designer.

Prioritize preserving existing functionality.

Focus on visual consistency, layout fixes, and UX polish.

Never “hallucinate” new logic, dependencies, or random animations.

Always explain changes briefly before committing or applying them.---
alwaysApply: true
---
